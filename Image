#!/usr/bin/python
from os import listdir
from PIL import Image as PImage

def loadImages(path):
    # return array of images

    imagesList = listdir(path)
    loadedImages = []
    for image in imagesList:
        img = PImage.open(path + image)
        loadedImages.append(img)

    return loadedImages

path = "/path/to/your/images/"

# your images in an array
imgs = loadImages(path)

for img in imgs:
    # you can show every image
    img.show()

######################################################################################

from os import listdir
from os.path import isfile, join
import numpy
import cv2

mypath='/path/to/folder'
onlyfiles = [ f for f in listdir(mypath) if isfile(join(mypath,f)) ]
images = numpy.empty(len(onlyfiles), dtype=object)
for n in range(0, len(onlyfiles)):
  images[n] = cv2.imread( join(mypath,onlyfiles[n]) )

######################################################################################

import cv2
from pathlib import Path

path=Path(".")

path=path.glob("*.jpg")

images=[]`


for imagepath in path.glob("*.jpg"):

        img=cv2.imread(str(imagepath))
        img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)                         
        img=cv2.resize(img,(200,200))
        images.append(img)
print(images)

######################################################################################

import cv2
import os

def load_images_from_folder(folder):
    images = []
    for filename in os.listdir(folder):
        img = cv2.imread(os.path.join(folder,filename))
        if img is not None:
            images.append(img)
    return images

######################################################################################

import matplotlib.image as mpimg

def load_images(folder):
    images = []
    for filename in os.listdir(folder):
        img = mpimg.imread(os.path.join(folder, filename))
        if img is not None:
            images.append(img)
    return images

######################################################################################

from PIL import Image
def load_images_from_folder(folder):
    images = []
    for filename in os.listdir(folder):
        img = Image.open(os.path.join(folder,filename))
        images.append(img)
	return images
######################################################################################

import os
import glob
import numpy as np
from PIL import Image

path = r'D:\user\ASCII'
outpath = 'D:\user\ASCII\TIFF'

filenames = glob.glob(path + "/*.asc") #read all files in the path mentioned

for x in filenames:
    myarray = np.loadtxt(x, skiprows=9)
    im = Image.fromarray(myarray)
    im.save(outpath + '/*.tif')

######################################################################################

import cv2
import os

def load_images_from_folder(folder):
    images = []
    for filename in os.listdir(folder):
        img = cv2.imread(os.path.join(folder,filename))
        if img is not None:
            images.append(img)
    return images

######################################################################################

#!/usr/bin/python
from PIL import Image
import os, sys

path = "/root/Desktop/python/images/"
dirs = os.listdir( path )

def resize():
    for item in dirs:
        if os.path.isfile(path+item):
            im = Image.open(path+item)
            f, e = os.path.splitext(path+item)
            imResize = im.resize((200,200), Image.ANTIALIAS)
            imResize.save(f + ' resized.jpg', 'JPEG', quality=90)

resize()

######################################################################################

def load_images(path_to_directory):
    """Load images and return them as a dict."""
    image_dict = {}
    for filename in os.listdir(path_to_directory):
        if filename.endswith('.png'):
            path = os.path.join(path_to_directory, filename)
            key = filename[:-4]
            image_dict[key] = pygame.image.load(path).convert()
    return image_dict
If you want to load all images from subdirectories as well, use os.walk:

def load_images(path_to_directory):
    """Load all images from subdirectories and return them as a dict."""
    images = {}
    for dirpath, dirnames, filenames in os.walk(path_to_directory):
        for name in filenames:
            if name.endswith('.png'):
                key = name[:-4]
                img = pygame.image.load(os.path.join(dirpath, name)).convert()
                images[key] = img
    return images

######################################################################################
##   Directory 
######################################################################################

from skimage import io, img_as_float
import matplotlib.image as mpimg
import os
import pandas as pd

def load_images(n):
    images = []
    data = []
    for dirs in n:
        for filename in os.listdir(dirs):
            img = mpimg.imread(os.path.join(dirs, filename))
            img = img_as_float(img)
            if img is not None:
                images.append(img)
            if(np.mean(img) < 0.1):
                print filename
                data.append((dirs, filename))
                df = pd.DataFrame(data, columns=['Folder', 'File'])
    return df

from glob import glob
folder = glob("C:/Data/Testing/*/")
df = load_images(folder)

######################################################################################

import numpy as np
import cv2

# Two images of same size 
image_in = cv2.imread('my_image.png')
image_in2 = cv2.imread('my_image2.png')
image_new = np.ones(image_in.shape[:2], dtype="uint8") * 255

counter = 0
counter2 = 0

for i in range(image_in.shape[0]):
    for j in range(image_in.shape[1]):
        if image_in[i, j] < 255:
            counter += 1
            if image_in2[i, j] == 0:
                image_new[i, j] = 0
            else:
                image_new[i, j] = 255
                counter2 += 1

######################################################################################







